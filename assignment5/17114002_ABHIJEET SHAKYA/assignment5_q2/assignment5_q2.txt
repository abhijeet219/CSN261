// Abhijeet Shakya , ENROLLMENT NUMBER=17114002

#include <iostream>
#include <iomanip>
#include <fstream>
using namespace std;

struct node{
	char key;
	node* left;
	node* right;
};

struct node* newNode(char value){
	struct node* temp = new node;
	temp->key=value;
	temp->left=NULL;
	temp->right=NULL;
	return temp;
}

struct node* insert(node* root ,char value){
	if(root==NULL)
	return newNode(value);
	
	if(root->key > value)
	root->left=insert(root->left, value);
	else if(root->key < value)
	root->right=insert(root->right, value);
	
	return root;
}

void inOrder(node* root){
	if(root!=NULL){
		inOrder(root->left);
		cout<<root->key<<" ";
		inOrder(root->right);
//		cout<<endl;
	}
}

int find(node*root, char c){
	if(root==NULL)
	return 1;
	if(c == root->key)
	return 0;
	else if(c < root->key)
	find(root->left, c);
	else if(c > root->key)
	find(root->right, c);
}

int main() {
    string finalString = "";
    string inputString;
    string searchString;
	ifstream inFile;
    string command;
    char* filename;
//	string filename;
    
    struct node* root = NULL;
    
    while(cin){
    	getline(cin,command);
    	if(command == "Read File"){
//	    	cout<<"input file name:"<<endl;
	    	
//	    	cin>>filename;
//			inFile.open(filename);
			
//			inFile.open("inputFile1.txt");
			inFile.open("inputFile2.txt");
//			inFile.open("inputFile3.txt");

//			cout<<"after file opened"<<endl;
		    if (!inFile) {
		        cout << "Unable to open file";
		        exit(1); // terminate with error
		    }
		    
		    while (inFile >> inputString) {
//		    	cout<<"inside file now"<<endl;
		        finalString +=  inputString;
		    }
		    
		    inFile.close();
		    cout<<finalString<<endl;
		    
			root = insert(root,finalString[0]);
			for(int i=0;i<finalString.length()-1;i++){
				insert(root,finalString[i+1]);
			}
		} 
	
		else if(command=="search"){
			int k=0;
			cin>>searchString;
			for(int j=0; j<searchString.length();j++){
				if(find(root,searchString[j])==1)
				k=1;
			}
			
			if(k==0)
			cout<<"YES"<<endl;
			else
			cout<<"NO"<<endl;
		}

		else if(command=="list"){
			inOrder(root);
			cout<<endl;
		}

		else if(command=="quit")
		return 0;
	}
}